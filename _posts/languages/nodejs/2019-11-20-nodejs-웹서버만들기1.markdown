---
layout: article
title: "Web Server 만들기 1탄"
date: 2019-11-20 18:00:32 +0900
categories: [development, nodejs]
# description: "웹 통신 프로토콜인 URL, HTTP, SMTP, MIME, FTP 을 정리"
excerpt: "Web Server 만들기 1탄"
image:
  teaser: posts/nodejs/nodejs.PNG
  credit: nodejs
  creditlink: https://nodejs.org/en/
  #url to their site or licensing
locale: "ko_KR"
# 리플 옵션
comments: true
tags:
- web protocols
- web developer
- web development basic
- 웹 개발 기초
- 웹 개발자
- 웹 개발자를 위한
- 웹 개발자를 위한 웹 프로토콜
- 웹 프로토콜
- HTTP
- MIME
- SMTP
- URL
- javascript
- 자바스크립트
- nodejs
- node.js
---
{% include toc.html %}

# 웹서버 만들기 1탄
이번 포스트에서는 간단하게 웹서버를 만들고 웹서버를 만들 때 어떤 기능들이 있는지 살펴본다. 노드에 기본으로 들어 있는 http 모듈을 사용하면 웹 서버 기능을 담당하는 서버 객체를 만들 수 이다. http 모듈을 로딩했을 때 반환되는 객체에는 createServer() 메소드가 정의되어 있다. 따라서 이 메소드를 호출하면 서버 객체를 만들 수 있다.  

---

# 간단하게 서버 만들기
밑의 소스코드는 간단하게 서버를 만들기위한 가장 기초적인 예이다.

```javascript
//http모듈 로딩
const http = require('http');

//웹 서버 객체를 만든다.
const server = http.createServer();

//웹 서버를 시작하여 3000번 포트에서 대기합니다.
const port = 3000;

//서버 IP를 지정
const host = '192.168.10.100';

//host는 default로 지정시 자신의 ip로 잡힘
server.listen(port, host,'50000', ()=>{
    console.log(`웹 서버가 시작되었습니다. : ${port}`);
});

```

위의 소스코드에서 http의 createServer메소드를 이용해 server라는 객체를 생성했다.  
이 server객체에는 listen과 close라는 server의 대표적인 메서드들이있다.  

|메소드 이름|설명|
|:---|:---|
|listen(port[,hostname][,backlog][,callback])|서버를 실행하여 대기시킨다.|
|close([callback])|서버를 종료시킵니다.|


# 클라이언트가 웹 서버에 요청할 때 발생하는 이벤트 처리
만약 클라이언트가 웹서버에 request를 보낸다면 서버는 이벤트를 등록해두어 해당 request를 처리하게 된다.  
server객체에 미리 등록해져있는 이벤트들은 대표적으로 다음과 같다.

|이벤트 이름|설명|
|:---|:---|
|connection|클라이언트가 접속하여 연결이 만들어질 때 발생하는 이벤트이다.|
|request|클라이언트가 요청할 때 발생하는 이벤트이다.|
|close|서버를 종료할 때 발생하는 이벤트이다.|

이외에도 여러가지 이벤트가 있다. 우리는 위의 3 이벤트는 반드시 알아야 한다.  
위의 이벤트를 처리하는 소스코드는 다음과같다.  

```javascript
const http = require('http');

//웹서버객체를만든다
const server = http.createServer();


//웹 서버를 시작하여 9928포트에서 대기하도록 설정
const port = 9928;
server.listen(port, ()=>{
    console.log(`웹 서버가 시작되었습니다 : ${port}`);
});

//클라이언트 연결 이벤트 처리, connection이벤트에는 콜백함수의 parament로 socket이 전달됨
server.on('connection', (socket)=>{
    var addr = socket.address();
    console.log(`클라이언트가 접속했습니다. 클라이언트 IP : ${addr.address}}, 클라이언트 PORT : ${addr.port}`);
});

//클라이언트 요청 이벤트 처리,콜백 함수의 parament로 req,res객체가 전달
server.on('request', (req,res)=>{
    console.log('클라이언트 요청이 들어왔습니다.');
    console.dir(res);
});

//서버 종료 이벤트 처리
server.on('close', ()=>{
    console.log('서버가 종료되었습니다.');
})
```

# connection

위의 소스코드를 살펴보면 connection 이벤트 처리시 `콜백함수의 매개변수로 socket객체`가 전달된다. 
이 `socket객체르 통해 address()메서드를 이용해 클라이언트의 IP와 Port정보를 알아낼 수 있다.`  

```javascript
//클라이언트 연결 이벤트 처리, connection이벤트에는 콜백함수의 parament로 socket이 전달됨
server.on('connection', (socket)=>{
    var addr = socket.address();
    console.log(`클라이언트가 접속했습니다. 클라이언트 IP : ${addr.address}}, 클라이언트 PORT : ${addr.port}`);
});
```


# requst
다음으로 request 이벤트 처리시 req와 res객체가 전달되는데, 클라이언트에게 응답을 하기위해 우리는 res객체를 이용하면된다.  
다음은 간단하게 res객체를 이용해 클라이언트에게 응답할 내용을 적는 코드이다.  

```javascript
//클라이언트 요청 이벤트 처리
server.on('request', (req,res)=>{
    console.log('클라이언트 요청이 들어왔습니다.');
    
    res.writeHead(200, {"Content-type": "text/html; charset=utf-8"});
    res.write("<!DOCTYPE html>");
    res.write("<html>");
    res.write("<head>");
    res.write("<title>응답페이지</title>");
    res.write("</head>");
    res.write("<body>");
    res.write("<h1>노드제이에스로부터 응답페이지</h1>");
    res.write("</body>");
    res.write("</html>");
    res.end();
    console.dir(res);
});
```
res객체에서 자주사용되는 메서드들은 다음과 같다.

|메소드 이름|설명|
|:---|:---|
|writeHead(statusCode[,statusMessage][,headers])|응답으로 보낼 헤더를 만든다.|
|write(chunk[,encoding][,callback])|응답 본문(body) 데이터를 만든다. 여러번 호출 가능하다.|
|end([data][,encoding][,callback])|클라이언트로 응답을 전송한다. 파라미터에 데이터가 들어 있다면 이 데이터를 포함시켜 응답을 전송한다. 클라이언트의 요청이 있을 때 한 번은 호출되어야 응답을 보내며, 콜백 함수가 지정되면 응답이 전송된 후 콜백 함수가 호출된다.|

그리고 res의 writeHead에서 보낼 데이터 type을 정하는데 데이터 type은 다음과 같이 여러가지가있다.

|Content Type의 값|설명|
|:---|:---|
|text/plain|일반 텍스트 문서|
|text/html|HTML 문서|
|text/css|CSS 문서|
|text/xm|xml 문서|
|image/jpeg, image/png|JPEG 파일, PNG 파일|
|video/mpeg, audio/mp3|MPEG 비디오 파일, MP# 음악 파일|
|application/zip|ZIP 압축 파일|


간단한 예제로 클라이언트에서 요청이 있을 떄 파일을 읽어 응답하는 코드를 보자.

```javascript
const http = require('http');
const fs = require('fs');

const server = http.createServer(()=>{
    console.log("서버 객체 생성");
});

const port = 9928;

server.listen(port,()=>{
    console.log("서버 연결 대기 중");
})


server.on('connection',(socket)=>{
    console.log(`클라이언트 접속함 클라이언트 IP: ${socket.address().addr}, 클라이언트가 접속한 PORT: ${socket.address().port} `);
})
server.on('request', (req, res)=>{
    console.log("클라이언트 요청이 들어왔습니다.");

    let filename = 'test.jpg';

    fs.readFile(filename, (err,data)=>{
        res.writeHead(200,{"Content-type":"image/jpg"});
        res.write(data);
        res.end();
    })
})
```
---

# 참고문헌
- *Do it! Node.js 프로그래밍*

