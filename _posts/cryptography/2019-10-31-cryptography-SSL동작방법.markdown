---
title: "SSL 동작 방식"
date: 2019-10-27 20:00:00 -0900
categories: [cryptography]
tags: 
- 대칭키
- 비대칭키
- 타원곡선
- RSA
- SSL
- Secure
- 전자서명
- ECDSA
---

**SSL이 어떻게 동작되는지 알아본다.**


# 목록    
1. [**SSL-#1.SSL의 개념**](https://lbm93.github.io/cryptography/cryptography-SSL개념및암호화/)
2. [**SSL-#2.SSL 인증서**](https://lbm93.github.io/cryptography/cryptography-SSL인증서/)
3. [**SSL-#3.SSL에서의 SSC,CSR 개념**](https://lbm93.github.io/cryptography/cryptography-SSL(SSC,CSR)/)
4. [**SSL-#4.SSL동작 방법**](https://lbm93.github.io/cryptography/cryptography-SSL동작방법/)    
  
---

# SSL 동작방식
지금까지 SSL을 이해하고 사용하기위한 준비를 하였다.
SSL이 어떻게 동작되는지 알아보자.


SSL은 암호화된 데이터를 전송하기 위하여 공개키와 대칭키를 혼합해서 사용한다.서버와 클라이언트가 서로 실제 데이터를 주고 받을 때 사용되는 암호화 방법은 대칭키를 사용하고 이 대칭키를 암호화할때 사용하는 암호화 방법이 공개키 방법이다.
  
>실제 데이터 : **대칭키**  

>대칭키의 키 : **공개키**  
  


# SSL 동작방법

컴퓨터와 컴퓨터가 네트워크를 통해서 통신을 할때 “악수 -> 전송 -> 세션종료” 3가지 단계를 거친다. 이 과정을 흔히 Hand Shake라고 한다. 이 과정을 통해서 상대방이 존재하는지, 또 상대방과 데이터를 주고 받기 위해서는 어떤 방법을 사용해야하는지 파악한다. SSL도 웹서버와 웹브라우저가 통신하는 것이므로 역시 HandShake과정을 거친다. 이 때 서버와 클라이언트는 SSL 인증서를 주고 받게 된다.   

공개키는 이상적인 통신 방법이다. 암호화와 복호화를 할 때 사용하는 키가 서로 다르기 때문에 메시지를 전송하는 쪽이 공개키로 데이터를 암호화하고, 수신 받는 쪽이
비공개키로 데이터를 복호화하면 되기 때문이다. 그런데 SSL에서는 이 방식을 사용하지 않는다. 왜냐하면 공개키 방식의 암호화는 매우 많은 컴퓨터 자원을 사용하기 때문이다.  

반면 암호화와 복호화에 사용되는 키가 동일한 대칭키 방식은 적은 컴퓨터 자원으로 암호화를 수행할 수 있기 때문에 효율적이지만 수신측과 송신측이 동일한 키를 공유해야 하기 
때문에 보안의 문제가 발생한다. 그래서 SSL은 공개키와 대칭키의 장점을 혼합한 방식을 사용한다. 그 핸드쉐이크 단계에서 클라이언트와 서버가 통신하는 과정을 순서대로 살펴보자.  


![그림]({{ site.url }}/assets/images/img/blockchain-cryptography/ssl동작방법.png)

1. 먼저 클라이언트가 서버에게 접속하는 단계를 “client hello”라고 한다. 이때 클라이언트가 서버에게 주는 정보는 다음과 같다.

**클라이언트가 지원하는 암호화 방식들** : 클라이언트와 서버가 지원하는 암호화 방식이 서로 다를 수 있기 때문에 상호간에 어떤 암호화 방식을 사용할 것인지에
                                        대한 협상을 해야한다. 이 협상을 위해서 클라이언트 측에서는 자신이 사용할 수 있는 암호화 방식을 전송한다.,  

**세션 아이디** : 이미 SSL 핸드쉐이킹을 했다면 비용과 시간을 절약하기 위해서 기존의 세션을 재활용하게 되는데 이 때 사용할 연결에 대한 식별자를 서버 측으로 전송한다.  
  
  
  
2. 서버는 Client Hello에 대한 응답으로 Server Hello를 하게 된다. 이 단계에서 주고 받는 정보는 아래와 같다.

**서버 측에서 생성한 랜덤 데이터**, 

**서버가 선택한 클라이언트의 암호화 방식** : 클라이언트가 전달한 암호화 방식 중에서 서버 쪽에서도 사용할 수 있는 암호화 방식을 선택해서 클라이언트로 전달한다. 이로써 암호화 방식에                                             대한 협상이 종료되고 서버와 클라이언트는 이 암호화 방식을 이용해서 정보를 교환한다.,  

**인증서**

3. 클라이언트는 서버의 인증서가 CA에 의해서 발급된 것인지 확인하기 위해서 클라이언트에 내장된 CA리스트를 확인한다.   
CA리스트에 인증서가 없다면 사용자에게 경고메시지를 출력하게 된다. 인증서가 CA에 의해서 발급된 것인지를 확인하기 위해서 클라이언트에 내장된 CA의 공개키를 이용해서 인증서를복호화한다.
복호화에 성공했다면 인증서는 CA의 개인키로 암호화된 문서임이 암시적으로 보증된 것이다. 이러한 절차로 인증서를 전송한 서버를 신뢰할 수 있게 된다.  
클라이언트는 2번 단계를 통해서 받은 서버의 랜덤 데이터와 클라이언트가 생성한 랜덤 데이터를 조합해서 pre master secret이라는 키를 생성한다.  
이 키는 뒤에서 살펴볼 세션단계에서 데이터를 주고 받을 때 암호화하기 위해서 사용될 것입니다. 이 때 사용할 암호화 기법은 대칭키이기 때문에 Pre master secret 값은 제 3자에게 절대로 노출되어서는 안된다. 이 pre master secret 값을 어떻게 서버에 전달할까? 이 때 사용하는 방법이 바로 공개키 방식이다. 서버의 공개키로 pre master secre값을 암호화해서 서버로 전송하면 서버는 자신의 비공개키로 안전하게 복호화 할 수 있다. 그럼 서버의 공개키를 어떻게 구할 수 있을까? 서버로부터 받은 인증서 안에 들어 있다. 이서버의 공개키를 이용해서 pre master secret 값을 암호화한 후에 서버로 전송하면 안전하게 전송할 수 있다.  

  
4. 서버는 클라이언트가 전송한 pre master secret 값을 자신의 비공개키로 복호화한다. 이로서 서버와 클라이언트가 모두 pre master secret 값을 공유하게 되었다. 그리고 서버와 클라이언트는 모두 일련의 과정을 거쳐서 premaster secret 값을 master secret 값으로 만든다. Master secret은 session key를 생성하는 필요로 한다. 이 session key가 비대칭키가 된다.
이 session key를 이용해 서버와 클라이언트는 실제로 주고 받는 데이터를 암호화한 후에 주고 받는다. 이렇게 session key를 서버와 클라이언트가 모두 공유하게 된다.



# Session

세션은 실제로 서버와 클라이언트가 데이터를 주고받는 단계입니다. 이 단계에서 핵심은 정보를 상대방에게 전송하기 전에 session key 값을 이용해서 대칭키 방식으로 암호화 한다는 점입니다. 암호화된 정보는 상대방에게 전송될 것이고, 상대방도 세션키 값을 알고 있기 때문에 암호를 복호화 할 수 있습니다.  

그냥 공개키를 사용하면 될 것을 대칭키와 공개키를 조합해서 사용하는 이유는 무엇일까요? 그것은 공개키 방식이 많은 컴퓨터 파워를 사용하기 때문입니다. 만약 공개키를 그대로 사용하면 많은 접속이 몰리는 서버는 매우 큰 비용을 지불해야 할 것입니다. 반대로 대칭키는 암호를 푸는 열쇠인 대칭키를 상대에게 전송해야 하는데, 암호화가 되지 않은 인터넷을 통해서 키를 전송하는 것은 위험하기 때문입니다. `그래서 속도는 느리지만 데이터를 안전하게 주고 받을 수 있는 공개키 방식으로 대칭키를 암호화하고, 실제 데이터를 주고 받을 때는 대칭키를 이용해서 데이터를 주고 받는 것입니다.` 데이터의 전송이 끝나면 SSL 통신이 끝났음을 서로에게 알려줍니다. 이 때 통신에서 사용한 대칭키인 세션키를 폐기하게 됩니다.
  
# 참고문서
- <https://12bme.tistory.com/80>
